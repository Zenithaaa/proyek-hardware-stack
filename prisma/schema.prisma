generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Kategori {
  id          Int      @id @default(autoincrement()) @map("IdKategori")
  nama        String   @unique @map("NamaKategori") @db.VarChar(50)
  description String?  @map("DeskripsiKategori") @db.Text
  items       Item[]

  @@map("tbl_kategori")
}

model Supplier {
  id            Int         @id @default(autoincrement()) @map("IdSupplier")
  nama          String      @map("NamaSupplier") @db.VarChar(100)
  namaKontak    String?     @map("NamaKontakSupplier") @db.VarChar(100)
  alamat        String?     @map("AlamatSupplier") @db.Text
  noTelp        String?     @map("NoTelpSupplier") @db.VarChar(20)
  email         String?     @map("EmailSupplier") @db.VarChar(100)
  kota          String?     @map("KotaSupplier") @db.VarChar(100)
  kodePos       String?     @map("KodePosSupplier") @db.VarChar(10)
  catatan       String?     @map("CatatanSupplier") @db.Text
  createdAt     DateTime?   @default(now()) @map("createdAt")
  items         Item[]
  pembelian     PembelianKeSupplier[]
  penerimaanBarangHeader PenerimaanBarangHeader[] 

  @@map("tbl_supplier")
}

enum StatusPenerimaan {
  LENGKAP_SESUAI_PO
  SEBAGIAN_DITERIMA
  TANPA_PO
}

// --- Tabel Header untuk setiap dokumen penerimaan barang ---
model PenerimaanBarangHeader {
  id                      String    @id @default(cuid())
  nomorDokumen            String    @unique // Nomor dokumen penerimaan internal Anda, bisa di-generate
  tanggalPenerimaan       DateTime  @default(now())

  pembelianKeSupplierId   Int?
  pembelianKeSupplier     PembelianKeSupplier? @relation(fields: [pembelianKeSupplierId], references: [id])

  supplierId              Int
  supplier                Supplier  @relation(fields: [supplierId], references: [id])

  nomorSuratJalanSupplier String?   
  userIdPenerima          String?   

  // userPenerima            User?     @relation(fields: [userIdPenerima], references: [clerkId]) // atau field ID User lokal 

  catatan                 String?   @db.Text // Catatan tambahan untuk penerimaan ini
  statusPenerimaan        StatusPenerimaan?

  // Relasi ke detail item yang diterima
  detailPenerimaanBarang  PenerimaanBarangDetail[]

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@index([pembelianKeSupplierId])
  @@index([supplierId])
  @@index([userIdPenerima])
  @@index([tanggalPenerimaan])
}

// --- Tabel Detail untuk setiap item barang yang diterima dalam satu dokumen penerimaan ---
model PenerimaanBarangDetail {
  id                          String    @id @default(cuid())

  // Relasi ke Header Penerimaan Barang
  penerimaanBarangHeaderId    String
  penerimaanBarangHeader      PenerimaanBarangHeader @relation(fields: [penerimaanBarangHeaderId], references: [id], onDelete: Cascade) // Jika header dihapus, detail ikut terhapus

  // Relasi ke Item yang diterima
  itemId                      Int
  item                        Item      @relation(fields: [itemId], references: [id])

  // Relasi ke Detail Purchase Order (Opsional, untuk melacak item PO mana yang diterima)
  detailPembelianKeSupplierId Int?
  detailPembelianKeSupplier   DetailPembelianKeSupplier? @relation(fields: [detailPembelianKeSupplierId], references: [id], onDelete: SetNull)

  jumlahDiterima              Int       
  hargaBeliSaatTerima         Decimal?  @db.Decimal(12, 2) 

  // Field tambahan yang mungkin berguna tergantung jenis barang
  nomorBatch                  String?
  tanggalKadaluarsa           DateTime?
  lokasiGudang              String?   // Jika punya manajemen lokasi gudang

  keteranganItem              String?   @db.Text // Catatan spesifik untuk item ini saat diterima

  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  @@index([penerimaanBarangHeaderId])
  @@index([itemId])
  @@index([detailPembelianKeSupplierId])
}

model SesiKasir {
  id                    String    @id @default(cuid())
  userId                String
  // user                  User      @relation(fields: [userId], references: [id]) // Jika ada tabel User lokal
  waktuBuka             DateTime  @default(now())
  modalAwal             Decimal   @db.Decimal(12, 2)
  waktuTutup            DateTime?
  totalPenjualanSistem  Decimal?  @db.Decimal(14, 2)
  totalUangFisik        Decimal?  @db.Decimal(14, 2)
  selisih               Decimal?  @db.Decimal(12, 2)
  catatanSesi           String?   @db.Text
  transaksiPenjualan    TransaksiPenjualan[]

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Item {
  id              Int       @id @default(autoincrement()) @map("ItemId")
  nama            String    @map("NamaItem") @db.VarChar(100)
  kategoriId      Int?      @map("IdKategori")
  hargaJual       Decimal   @map("HargaJual") @db.Decimal(10, 2)
  hargaBeli       Decimal?  @map("HargaBeli") @db.Decimal(10, 2)
  stok            Int       @default(0) @map("Stok")
  stokMinimum     Int?      @default(0) @map("StokMinimum")
  manufacture     String?   @db.VarChar(50)
  kodeBarcode     String?   @unique @map("KodeBarcode") @db.VarChar(50)
  supplierId      Int?      @map("IdSupplier")
  satuan          String?   @default("Pcs") @db.VarChar(20)
  kategori        Kategori? @relation(fields: [kategoriId], references: [id])
  supplier        Supplier? @relation(fields: [supplierId], references: [id])
  detailTransaksi DetailTransaksiPenjualan[]
  detailPembelian DetailPembelianKeSupplier[]
  penyesuaianStok PenyesuaianStok[]
  detailPenerimaanBarang PenerimaanBarangDetail[]

  @@index([nama], map: "idx_item_nama")
  @@index([kodeBarcode], map: "idx_item_barcode")
  @@map("tbl_item")
}

model Pelanggan {
  id                Int       @id @default(autoincrement()) @map("IdPelanggan")
  nama              String    @map("NamaPelanggan") @db.VarChar(100)
  jenisKelamin      String?   @map("JK") @db.VarChar(10)
  noTelp            String?   @map("NoPhone") @db.VarChar(20)
  alamat            String?   @db.Text
  email             String?   @unique @db.VarChar(100)
  poinLoyalitas     Int?      @default(0) @map("PoinLoyalitas")
  tanggalRegistrasi DateTime? @default(now()) @map("TanggalRegistrasi")
  catatan           String?
  kota              String?
  kodePos           String?
  transaksi         TransaksiPenjualan[]

  @@map("tbl_pelanggan")
}

model TransaksiPenjualan {
  id                    String    @id @default(cuid())
  nomorStruk            String    @unique
  pelangganId           Int?
  pelanggan             Pelanggan? @relation(fields: [pelangganId], references: [id])
  userId                String    // Kasir - Clerk User ID
  userPenerimaId String?
  tanggalWaktuTransaksi DateTime  @default(now())

  detailTransaksiPenjualan DetailTransaksiPenjualan[]

  subtotalSebelumDiskonPajak Decimal @db.Decimal(15, 2) @default(0.00)
  totalDiskonTransaksi  Decimal?  @db.Decimal(15, 2) @default(0.00)
  totalPajak            Decimal?  @db.Decimal(15, 2) @default(0.00)
  grandTotal            Decimal   @db.Decimal(15, 2)

   // --- PENYESUAIAN UNTUK MIDTRANS ---
  // Status pembayaran akan diupdate oleh webhook dari Midtrans
  statusPembayaran    String    @default("PENDING_PAYMENT_GATEWAY")
  // status: 'PENDING_PAYMENT_GATEWAY', 'PAID_VIA_MIDTRANS', 'FAILED_MIDTRANS', 'EXPIRED_MIDTRANS', 'REFUNDED_MIDTRANS'

  // Status transaksi keseluruhan
  statusTransaksi     String    @default("MENUNGGU_PEMBAYARAN_PG")
  // status: 'PROSES', 'MENUNGGU_PEMBAYARAN_PG', 'TERTAHAN', 'SELESAI', 'DIBATALKAN'

  // ID Order/Transaksi dari sisi Payment Gateway untuk seluruh transaksi ini
  paymentGatewayName    String?   // Misal: "Midtrans"
  paymentGatewayOrderId String?   @unique // ID Order unik dari Midtrans untuk transaksi ini
  // --- AKHIR PENYESUAIAN UNTUK MIDTRANS ---

  // Info Pengantaran
  perluDiantar        Boolean   @default(false)
  alamatPengiriman    String?   @db.Text
  kotaPengiriman      String?
  kodePosPengiriman   String?
  noTelpPenerima      String?
  catatanPengiriman   String?   @db.Text
  biayaPengiriman     Decimal?  @db.Decimal(10, 2) @default(0.00)

  pembayaranTransaksi PembayaranTransaksi[] // Jika mendukung multi-payment attempt

  sesiKasirId         String?
  sesiKasir           SesiKasir? @relation(fields: [sesiKasirId], references: [id])

  catatanTransaksi      String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model MidtransWebhookLog {
  id                  String    @id @default(cuid())
  receivedAt          DateTime  @default(now())
  isVerified          Boolean   @default(false) // Apakah signature webhook berhasil diverifikasi
  midtransOrderId     String?   // order_id dari Midtrans
  midtransTransactionId String? // transaction_id dari Midtrans
  transactionStatus   String?   // transaction_status dari Midtrans
  paymentType         String?   // payment_type dari Midtrans
  statusCode          String?   // status_code dari Midtrans (misal 200, 201, 407)
  grossAmount         String?   // gross_amount dari Midtrans
  requestBody         Json      // Seluruh body JSON dari webhook
  processingStatus    String?   // Status pemrosesan di sisi Anda ('SUCCESS', 'ERROR_VERIFICATION', 'ERROR_PROCESSING')
  errorMessage        String?   @db.Text // Pesan error jika ada masalah saat memproses webhook

  @@index([midtransOrderId])
  @@index([midtransTransactionId])
}

model PembayaranTransaksi {
  id                  String    @id @default(cuid())
  transaksiPenjualanId String
  transaksiPenjualan  TransaksiPenjualan @relation(fields: [transaksiPenjualanId], references: [id])

  // Akan diisi dari PG: e.g., 'CREDIT_CARD', 'GOPAY', 'QRIS', 'BANK_TRANSFER_BCA', 'TUNAI'
  metodePembayaran    String
  jumlahDibayar       Decimal   @db.Decimal(15, 2)

  // --- PENYESUAIAN UNTUK MIDTRANS ---
  // ID spesifik dari Midtrans untuk upaya/detail pembayaran ini (charge ID, dsb.)
  paymentGatewayPaymentId String?   @unique
  // Status spesifik untuk upaya pembayaran ini di Midtrans
  statusDetailPembayaran String   @default("PENDING") // 'PENDING', 'SUCCESS', 'FAILURE', 'EXPIRED', 'CHALLENGE' (status dari Midtrans)
  // Data tambahan dari Midtrans
  transactionType     String   @default("Payment") // Tipe transaksi dari Midtrans (Payment, Refund, etc)
  channel             String?   // Channel pembayaran (DANA, GOPAY, etc)
  amount              Decimal?  @db.Decimal(15, 2) // Jumlah pembayaran dari Midtrans
  // (Opsional tapi direkomendasikan) Menyimpan sebagian atau seluruh respons JSON dari Midtrans
  paymentGatewayResponseDetails Json?
  // --- AKHIR PENYESUAIAN UNTUK MIDTRANS ---

  waktuPembayaran     DateTime  @default(now()) // Waktu saat upaya pembayaran ini dicatat/diproses PG

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([transaksiPenjualanId])
}

model DetailTransaksiPenjualan {
  id                    Int       @id @default(autoincrement()) @map("IdDetailTransaksi")
  transaksiId           String    @map("IdTransaksi")
  itemId                Int       @map("ItemId")
  namaItemSaatTransaksi String    @map("NamaItemSaatTransaksi") @db.VarChar(100)
  jumlah                Int       @map("Jumlah")
  hargaJualSaatTransaksi Decimal   @map("HargaJualSaatTransaksi") @db.Decimal(12, 2)
  hargaBeliSaatTransaksi   Decimal? @map("HargaBeliSaatTransaksi") @db.Decimal(12, 2)
  diskonItemPersen      Decimal?  @default(0.00) @map("DiskonItemPersen") @db.Decimal(5, 2)
  diskonItemNominal     Decimal?  @default(0.00) @map("DiskonItemNominal") @db.Decimal(10, 2)
  subtotal              Decimal   @map("Subtotal") @db.Decimal(12, 2)
  transaksi             TransaksiPenjualan @relation(fields: [transaksiId], references: [id])
  item                  Item      @relation(fields: [itemId], references: [id])

  @@index([transaksiId], map: "idx_detail_transaksi_idtransaksi")
  @@index([itemId], map: "idx_detail_transaksi_itemid")
  @@map("tbl_detail_transaksi_penjualan")
}

model PembelianKeSupplier {
  id                Int       @id @default(autoincrement()) @map("IdPembelian")
  nomorPO           String?   @unique @map("NomorPO") @db.VarChar(50)
  nomorFaktur       String?   @map("NomorFakturSupplier") @db.VarChar(50)
  supplierId        Int       @map("IdSupplier")
  userPenerimaId    Int       @map("IdUserPenerima")
  alamatPengirimanSupplier String? @map("alamatPengirimanSupplier")  @db.Text
  syaratPembayaran         String? @map("SyaratPembayaran") @db.VarChar(50)
  tanggalPesan      DateTime? @map("TanggalPesan")
  tanggalJatuhTempo DateTime? @map("TanggalJatuhTempo")
  tanggalTerima     DateTime? @map("TanggalTerima")
  subtotal          Decimal   @default(0.00) @map("SubtotalPembelian") @db.Decimal(12, 2)
  diskon            Decimal?  @default(0.00) @map("DiskonPembelian") @db.Decimal(12, 2)
  pajak             Decimal?  @default(0.00) @map("PajakPembelian") @db.Decimal(12, 2)
  biayaLain         Decimal?  @default(0.00) @map("BiayaLain") @db.Decimal(12, 2)
  total             Decimal   @map("TotalPembelian") @db.Decimal(12, 2)
  status            String    @default("Pending") @map("StatusPembelian") @db.VarChar(20)
  catatan           String?   @db.Text
  supplier          Supplier  @relation(fields: [supplierId], references: [id])
  detailPembelian   DetailPembelianKeSupplier[]
  penerimaanBarangHeader PenerimaanBarangHeader[] 

  @@map("tbl_pembelian_ke_supplier")
}

model DetailPembelianKeSupplier {
  id              Int       @id @default(autoincrement()) @map("IdDetailPembelian")
  pembelianId     Int       @map("IdPembelian")
  itemId          Int       @map("ItemId")
  jumlahPesan     Int       @map("JumlahPesan")
  jumlahTerima    Int?      @default(0) @map("JumlahTerima")
  hargaBeli       Decimal   @map("HargaBeliSatuan") @db.Decimal(10, 2)
  subtotal        Decimal   @map("Subtotal") @db.Decimal(12, 2)
  pembelian       PembelianKeSupplier @relation(fields: [pembelianId], references: [id])
  item            Item      @relation(fields: [itemId], references: [id])

  penerimaanBarangDetail PenerimaanBarangDetail[]

  @@map("tbl_detail_pembelian_ke_supplier")
}

model PenyesuaianStok {
  id                Int       @id @default(autoincrement()) @map("IdPenyesuaian")
  nomorReferensi    String?   @unique @map("NomorReferensi") @db.VarChar(50)
  itemId            Int       @map("ItemId")
  item              Item      @relation(fields: [itemId], references: [id])
  tanggal           DateTime  @default(now()) @map("TanggalPenyesuaian")
  jenisPenyesuaian  String    @map("JenisPenyesuaian") @db.VarChar(20)
  tipeOperasi       String    @map("TipeOperasi") @db.VarChar(10)
  jumlah            Int       @map("Jumlah")
  stokSebelum       Int       @map("StokSebelum")
  stokSesudah       Int       @map("StokSesudah")
  keterangan        String?   @db.Text
  tanggalPenyesuaian  DateTime  @default(now())
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("tbl_penyesuaian_stok")
  @@index([itemId])

}

model PengaturanAplikasi {
  id                 String    @id @default(cuid()) 
  namaToko           String?
  alamatToko         String?   @db.Text
  kotaToko           String?
  provinsiToko       String?
  kodePosToko        String?
  teleponToko        String?
  emailToko          String?
  websiteToko        String?
  npwpToko           String?
  urlLogoToko        String?   // URL ke file logo yang disimpan
  headerStruk        String?   @db.Text
  footerStruk        String?   @db.Text
// --- Kolom Preferensi Aplikasi ---
  pajakAktif         Boolean   @default(false)
  namaPajak          String?   @default("PPN")
  persentasePajak    Decimal?  @db.Decimal(5, 2) @default(11.00) // Misal 11%
  hargaTermasukPajak Boolean   @default(false)

  prefixNomorStruk   String?   @default("INV/")
  digitNomorUrutStruk Int?      @default(5)
  // nomorStrukBerikutnya Int // Pengelolaan ini lebih kompleks, mungkin perlu tabel terpisah atau logika atomik

  simbolMataUang     String?   @default("Rp")
  posisiSimbolMataUang String?   @default("SEBELUM") // Enum: "SEBELUM", "SESUDAH"
  digitDesimalMataUang Int       @default(0)
  pemisahRibuan      String?   @default(".")
  pemisahDesimal     String?   @default(",")

  ukuranKertasStruk  String?   @default("58mm") // Enum: "58mm", "80mm"
  cetakLogoDiStruk   Boolean   @default(false)
  otomatisCetakStruk Boolean   @default(false)

  defaultStokMinimum Int       @default(10)

  temaAplikasi       String    @default("SISTEM") // Enum: "SISTEM", "TERANG", "GELAP"
  itemPerHalaman     Int       @default(10)
  // --- Akhir Kolom Preferensi Aplikasi ---
  updatedAt          DateTime  @updatedAt
}